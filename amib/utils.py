import base64
import gmpy2
import hashlib
from py3rijndael import Rijndael
from Crypto.Cipher import AES
import struct


def b2n(bb: bytes) -> int:
    data = base64.b64decode(bb)

    v = 0
    while data:
        b = data[0]
        data = data[1:]
        v <<= 8
        v |= b
    return v


def n2b(n: int) -> str:

    data = b""
    while n > 0:
        data = bytes([n & 0xff]) + data
        n >>= 8

    return base64.b64encode(data).decode("utf-8")


def to_rsa_public_params(n: int, exp: int) -> str:
    s = f"<RSAKeyValue><Modulus>{n2b(n)}</Modulus><Exponent>{n2b(exp)}</Exponent></RSAKeyValue>"
    return s


def rotate_left(n: int, shifts: int) -> int:
    return ((n << shifts) | (n >> (32 - shifts))) & 0xffff_ffff


def gen_reg_key(username: str, machine_code: str, rsa_d: int, rsa_e: int, rsa_n: int) -> str:
    content = f"{username}|{machine_code}".encode("utf-8")
    m = hashlib.md5()
    m.update(content)
    print(content)
    hashed = m.hexdigest()
    print(hashed)


    fkey = [1851880820, 1768715635, 0, 0, 0, 0, 0, 0, 
            218240534, 1684956005, 1684956005, 1684956005, 1134558029, 1134558029, 1134558029, 1134558029,
            -300364517, -1971933570, -300364517, -1971933570,  1034362814,  2117657843,  1034362814, 2117657843,
            -471086474,  1771922440, -2021283565,  234030957, -357901694, -1802355087, -1456135729, -686963396,
            149233112,  1635285456, -419573565, -351348818,  50451558, -1751913961,  1051118552, -374665500, 
            1643872099,  8586931, -427895184,  225444318, -732911493,  1136869996,  2103806388, -1798404272,
            853144660,  844821223, -735828841, -648796855, -512714944, -1565272788, -539599720, 1259920328,
            -630564435, -399463606,  1007980509, -448746860,  947469154, -1697976754,  1159508694, 235170078,
            -1463702572,  1089536158,  2095419203, -1717230121, -696318868, 1286990370, 162093300, 128791018, 
            788807176,  1878343318,  319861205, -1967811582, -1465244133, -467678151, -306801459, -367287001,
            -477916872, -1938378834, -1620697477,  366185081, -238266195,  366187668, -127598503, 310289790,
            273310290, -1673736708,  56284039,  378100222, -1234463978, -1548220542,  1541212123, 1235460773,
            376531120, -1974622900, -1994950965, -1617023179,  1835042432, -824671998, -1794799911, -593091460,
            116870189, -1933907615,  95264682, -1707888481, -710712997,  461103193, -1904318848, 1389904636,
            -1225314996,  978175021,  1071668103, -1512838376, -742029066, -927045457,  1186991663, 337136851,
        ]
    fkey = [k & 0xffff_ffff for k in fkey]

    ftable = [-1520213050, -2072216328, -1720223762, -1921287178,  234025727, -1117033514, -1318096930,  1422247313,  1345335392,  50397442, -1452841010,  2099981142,  436141799,  1658312629, -424957107, -1703512340,  1170918031, -1652391393,  1086966153, -2021818886,  368769775, -346465870, -918075506,  200339707, -324162239,  1742001331, -39673249, -357585083, -1080255453, -140204973, -1770884380,  1539358875, -1028147339,  486407649, -1366060227,  1780885068,  1513502316,  1094664062,  49805301,  1338821763,  1546925160, -190470831,  887481809,  150073849, -1821281822,  1943591083,  1395732834,  1058346282,  201589768,  1388824469,  1696801606,  1589887901,  672667696, -1583966665,  251987210, -1248159185,  151455502,  907153956, -1686077413,  1038279391,  652995533,  1764173646, -843926913, -1619692054,  453576978, -1635548387,  1949051992,  773462580,  756751158, -1301385508, -296068428, -73359269, -162377052,  1295727478,  1641469623, -827083907,  2066295122,  1055122397,  1898917726, -1752923117, -179088474,  1758581177,  0,  753790401,  1612718144,  536673507, -927878791, -312779850, -1100322092,  1187761037, -641810841,  1262041458, -565556588, -733197160, -396863312,  1255133061,  1808847035,  720367557, -441800113,  385612781, -985447546, -682799718,  1429418854, -1803188975, -817543798,  284817897,  100794884, -2122350594, -263171936,  1144798328, -1163944155, -475486133, -212774494, -22830243, -1069531008, -1970303227, -1382903233, -1130521311,  1211644016,  83228145, -541279133, -1044990345,  1977277103,  1663115586,  806359072,  452984805,  250868733,  1842533055,  1288555905,  336333848,  890442534,  804056259, -513843266, -1567123659, -867941240,  957814574,  1472513171, -223893675, -2105639172,  1195195770, -1402706744, -413311558,  723065138, -1787595802, -1604296512, -1736343271, -783331426,  2145180835,  1713513028,  2116692564, -1416589253, -2088204277, -901364084,  703524551, -742868885,  1007948840,  2044649127, -497131844,  487262998,  1994120109,  1004593371,  1446130276,  1312438900,  503974420, 
-615954030,  168166924,  1814307912, -463709000,  1573044895,  1859376061, -273896381, -1503501628, -1466855111, -1533700815,  937747667, -1954973198,  854058965,  1137232011,  1496790894, -1217565222, -1936880383,  1691735473, -766620004, -525751991, -1267962664, -95005012,  133494003,  636152527, -1352309302, -1904575756, -374428089,  403179536, -709182865, -2005370640,  1864705354,  1915629148,  605822008, -240736681, -944458637,  1371981463,  602466507,  2094914977, -1670089496,  555687742, -582268010, -591544991, -2037675251, -2054518257, -1871679264,  1111375484, -994724495, -1436129588, -666351472,  84083462,  32962295,  302911004, -1553899070,  1597322602, -111716434, -793134743, -1853454825,  1489093017,  656219450, -1180787161,  954327513,  335083755, -1281845205,  856756514, -1150719534,  1893325225, -1987146233, -1483434957, -1231316179,  572399164, -1836611819,  552200649,  1238290055, -11184726,  2015897680,  2061492133, -1886614525, -123625127, -2138470135,  386731290, -624967835,  837215959, 
-968736124, -1201116976, -1019133566, -1332111063,  1999449434,  286199582, -877612933, -61582168, -692339859,  974525996]
    ftable = [k & 0xffff_ffff for k in ftable]

    fi = [1,  3,  4,  2,  4,  5,  3,  5,  6,  4,  6,  7,  5,  7,  0,  6,  0,  1,  7,  1,  2,  0,  2,  3]
    fbsub = [99,  124,  119,  123,  242,  107,  111,  197,  48,  1,  103,  43,  254,  215,  171,  118,  202,  130,  201,  125,  250,  89,  71,  240,  173,  212,  162,  175,  156,  164,  114,  192,  183,  253,  147,  38,  54,  63,  247,  204,  52,  165,  229,  241,  113,  216,  49,  21,  4,  199,  35,  195,  24,  150,  5,  154,  7,  18,  128,  226,  235,  39,  178,  117,  9,  131,  44,  26,  27,  110,  90,  160,  82,  59,  214,  179,  41,  227,  47,  132,  83,  209,  0,  237,  32,  252,  177,  91,  106,  203,  190,  57,  74,  76,  88,  207,  208,  239,  170,  251,  67,  77,  51,  133,  69,  249,  2,  127,  80,  60,  159,  168,  81,  163,  64,  143,  146,  157,  56,  245,  188,  182,  218,  33,  16,  255,  243,  210,  205,  12,  19,  236,  95,  151,  68,  23,  196,  167,  126,  61,  100,  93,  25,  115,  96,  129,  79,  220,  34,  42,  144,  136,  70,  238,  184,  20,  222,  94,  11,  219,  224,  50,  58,  10,  73,  6,  36,  92,  194,  211,  172,  98,  145,  149,  228,  121,  231,  200,  55,  109,  141,  213,  78,  169,
  108,  86,  244,  234,  101,  122,  174,  8,  186,  120,  37,  46,  28,  166,  180,  198,  232,  221,  116,  31,  75,  189,  139,  138,  112,  62,  181,  102,  72,  3,  246,  14,  97,  53,  87,  185,  134,  193,  29,  158,  225,  248,  152,  17,  105,  217,  142,  148,  155,  30,  135,  233,  206,  85,  40,  223,  140,  161,  137,  13,  191,  230,  66,  104,  65,  153,  45,  15,  176,  84,  187,  22]

    a = []
    b = [0] * 8
    for i in range(8):
        j = i * 4
        a.append(struct.unpack("<I", hashed[j : j + 4].encode("utf-8"))[0])
        a[i] ^= fkey[i]
    
    k = 8
    x = a
    y = b
    
    for i in range(1, 14):
        for j in range(0, 8):
            m = j * 3
            y[j] = fkey[k] ^ ftable[x[j] & 0xff] ^ \
                rotate_left(ftable[(x[fi[m]] >> 8) & 0xff], 8) ^ \
                rotate_left(ftable[(x[fi[m + 1]] >> 16) & 0xff], 16) ^ \
                rotate_left(ftable[(x[fi[m + 2]] >> 24) & 0xff], 24)
            k = k + 1
        t = x
        x = y
        y = t
    
    for j in range(0, 8):
        m = j * 3
        y[j] = fkey[k] ^ fbsub[x[j] & 0xff] ^ \
            rotate_left(fbsub[(x[fi[m]] >> 8) & 0xff], 8) ^ \
            rotate_left(fbsub[(x[fi[m + 1]] >> 16) & 0xff], 16) ^ \
            rotate_left(fbsub[(x[fi[m + 2]] >> 24) & 0xff], 24)
        k = k + 1

    data = b""
    for item in y:
        data += struct.pack("<I", item)

    # encode it
    charset = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    # encoded = ""
    # n = 0
    # while data:
    #     n <<= 8
    #     n += data[-1]
    #     data = data[:-1]
# 
    # while n > 0:
    #     ch = n % len(charset)
    #     n = n // len(charset)
    #     encoded += charset[ch]
    encoded = base64.b64encode(data).decode("utf-8").strip("=")

    chunk_size = 8
    while len(encoded) % chunk_size != 0:
        encoded += charset[0]

    encoded_chunks = []
    for i in range(0, len(encoded), 8):
        encoded_chunks.append(encoded[i : i + 8])

    # last chunk: signature
    # from Crypto.Signature import PKCS1_v1_5
    # from Crypto.PublicKey import RSA
    # from Crypto.Random import get_random_bytes
# 
    # rsa_key = RSA.construct((rsa_n, rsa_e, rsa_d))
    # cipher = PKCS1_v1_5.new(rsa_key)
    # padded_data = data
    # signature = cipher.sign(padded_data)
    # breakpoint()

    encoded_chunks.append("aaaa")

    encoded_dashed = "-".join(encoded_chunks)

    print(encoded_dashed)
    return encoded_dashed


def trivial_obfuscate(s: str) -> str:
    lst = []
    for ch in s:
        lst.append(f"chr(&H{ord(ch):02x})")
    return " & ".join(lst)


def main():
    exponent = b2n(b"AQAB")
    n = b2n(b"vnevxCr1jHl8FY1sZ/TtjEtWtrPYA639dPUer+22/ZO9mBKWTp96xHrNNQfnqiYXcfDiAs74I5lAo3sQ91/iioph43rMvQcMxvX/QMlGSFhRH7GtcnHkaPJGVDrzBj0d7o7GpFv1P5Bg4GtK/5xYzRAllPCUa4oMVDlKthSofKc=")
    p = b2n(b"4Vm9Coxk+NZWrFaC+8NwFXSOgnB7w0+bFEuY5Mxc5lMhOnc6NaxIMnSm1QGZ++Y/TRrClqFQ/Blu+0E1TOTbqQ==")
    q = b2n(b"2F9j7MH6NB2R2jQ0Ti7hov7ymIEJdAAN8yljTdYX0ycsGVtf+At3GmKGqmcibYokKjA9N90gaubanOdnrpdHzw==")
    print((exponent))
    print((n))
    print((p), (q))
    print((p * q))


    # the difficult n
    p = 127722487753847670680942686418968204126608534939550462990078331045202710482039550898513606795039307069978551883478170133336442990116568422077626484587939058070383747044152628797187127281199334715809587015510311630686069211180881104176768439587647903575982629808981262410419581158043454967042818559792213210579
    q = 140871766114738581467371045553685037701894612174798975329398177842806173923711682588269880820394615205205301398950924522738979012855843615134011751716007873204811595865118707791167093077207783252601187182935368917917915544023139463637918126660773345062091865806536375912735040227340826743051033293994845807291
    n = 17992492422452591730170970446944453459541180511282050823773289313439686888396057864597405560124930961406750045896852303622375485127857966072442438032588307478559671603165815825746683785429747701009839945768985063483975883972526800553024464159414268373588693909849025536095489525625578480409525551480452450835008149030210684497677064458985607920758345849492448397602708899074190990351831373791656885180565660597935796712573124820976850212495788890281813260417633678005654170175727270085968408095462306220541462803881565475298411486464633616956683035567287449440306197952508566731552864610444379171471111341060236531489
    d = 17205662337420485776302621250293053431846213952768015123925352313389056822598979850041716951624113833137348858299916546688403406143826946484063048872245324289924976410912993326142033042657853093214332045123946212270995813425122100759244338211005258300519966370510525037347459054587189357855034191934806835013259115269056191756496823730299355824697684849790772233657925402831350515918439789325826948117923786142563544970178014167028356612585860670442054700951048447508195144172239495372522067834490222362166141043857246200480132103618320649446542574861264074804715855427644818564821799916958990616018039112667612309933

    # generate a bad/easy n

    bad_q = 96887023738774952750488444186241836776004907078718174764588077909593828852368652400913035932080027380211440324038481971745665889331233216251175005788154393277174645266929924685727074983191973204574829700025098018794014784098203654512539723847301451256911729351134890390537117259622945786773040175123869897179
    # bad_p = gmpy2.next_prime(bad_q)
    bad_p = 96887023738774952750488444186241836776004907078718174764588077909593828852368652400913035932080027380211440324038481971745665889331233216251175005788154393277174645266929924685727074983191973204574829700025098018794014784098203654512539723847301451256911729351134890390537117259622945786773040175123869897607
    # bad_n = bad_p * bad_q
    bad_n = 9387095368957941223709405117699691470281955466752809789696109211821186416294793341447487777305846185348203106707996634114443812777413657301156787370531628628921152874183669443544498572579513711912290671354608672457673833612870983050939945500699947902000681728788284145942088523383113587847399602614927158735137032131878170476167714593240686618059527725810509077215539497134419586128370853406498212528343836229063994986471065116437716412828574313549454901587863082610830281561744532169059950325972365496263732765718032642274793084643332542294563911204853853331696222600311511662503485115986911127177279030152348150653
    bad_d = 6139991412196470183816028643063195969552719608668274367989122382518864124194102662127187063029581891562345279388005122519856919333039218266455406933679895699161741615539792148502708703644750511749762183330912461086761741084928215060876186639280172524147629944427840402888437199320443873998725586543388963692125252060729075209465966479921040871907529644610407382360061298993851520144893713902627228189443614450100533261271341913433521066158025947737098819294830370768469271440443302218364707631024867799980453529549462925265231726498471763653554335677463532183495609655879196144074762124151201385560959363588062413461
    
    rsa_public_params = to_rsa_public_params(n, exponent)
    rsa_public_params_bad = to_rsa_public_params(bad_n, exponent)

    print(rsa_public_params)
    print(rsa_public_params_bad)

    gen_reg_key("nautilus", "C27B2C94BFB19DA3287A421AF6D3A", bad_d, exponent, bad_n)


if __name__ == "__main__":
    main()